{"version":3,"file":"static/js/870.fc0c6751.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/selectors.js","redux/operationsOld.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","redux/filterSlice.js","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/App.module.css?6c4d","pages/Tasks.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n    [selectContacts, selectFilter], \n    (contacts, filter) => {\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().includes(filter.toLowerCase())\n        );\n    }\n);","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://64ab1da90c6d844abedf3127.mockapi.io\";\n\nexport const fetchContacts = createAsyncThunk(\n    \"contacts/fetchContacts\",\n    async (_, thunkAPI) => {\n    try {\n        const response = await axios.get(\"/contacts\");\n        return response.data;\n    } catch (e) {\n        return thunkAPI.rejectWithValue(e.message);\n    }\n})\n\nexport const addContact = createAsyncThunk(\n    \"contacts/addContact\",\n    async (contact, thunkAPI) => {\n        try {\n            const resposne = await axios.post(\"/contacts\", contact);\n            return resposne.data;\n        } catch (e) {\n            return thunkAPI.rejectWithValue(e.message);\n        }\n    }\n)\n\n\nexport const deleteContact = createAsyncThunk( \n    \"contacts/deleteContact\",\n    async(contactId, thunkAPI) => {\n        try {\n            const response = await axios.delete(`/contacts/${contactId}`);\n            return response.data;\n        } catch (e) {\n            return thunkAPI.rejectWithValue(e.message);\n        }\n    }\n)\n\n","import css from \"./ContactForm.module.css\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport { Notify } from \"notiflix\";\nimport { selectContacts } from \"redux/selectors\";\nimport { addContact } from \"redux/operationsOld\";\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const handleFormSubmit = event => {\n        event.preventDefault();\n\n        const contact = {\n            id: nanoid(),\n            name: event.currentTarget.elements.name.value,\n            number: event.currentTarget.elements.number.value,\n        };\n        \n        const doesExist = contacts.find(\n            ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n        );\n\n        if (doesExist) {\n            return Notify.failure(\"Contact already exists\");\n        }\n\n        dispatch(\n            addContact(contact),\n            Notify.success(\"Contact was added to phonebook\"),\n            event.currentTarget.reset()\n        );\n    }\n        \n        // useEffect(() => {\n        //     if (contacts) {\n        //     localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n        //     }\n        // }, [contacts]);\n\n\n        return (\n            <form onSubmit={handleFormSubmit} className={css.form}>\n                <label className={css.label}>Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    placeholder=\"Enter name\"\n                    className={css.input}\n                    required\n                />\n                <label className={css.label}>Number</label>\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    placeholder=\"Enter phone number\"\n                    className={css.input}\n                    required\n                />\n\n                <button type=\"submit\" className={css.button}>Add contact</button>\n            </form>\n        )\n    }\n\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"contactListItem\":\"ContactList_contactListItem__3th7-\",\"contactListItemBtn\":\"ContactList_contactListItemBtn__TXYnT\"};","import propTypes from 'prop-types';\nimport css from './ContactList.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { selectError, selectFilteredContacts, selectIsLoading } from 'redux/selectors';\nimport {deleteContact, fetchContacts } from 'redux/operationsOld';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n\n  const filteredContacts = useSelector(selectFilteredContacts)\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  \n\n   useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onDeleteContact = id => {\n    dispatch(\n      deleteContact(id));\n      Notify.warning(\"Contact was deleted\");\n  };\n\n  return (\n\n    <div>\n      {isLoading && <p>Loading....</p>}\n       {error && <p>{error}</p>}\n      <ul>\n        {filteredContacts.map(({id, name, number}) => (\n          <li key={id} className={css.contactListItem}>\n            {name}: {number}\n            <button\n              type=\"button\"\n              className={css.contactListItemBtn}\n              onClick={() => onDeleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n)};\n\nContactList.propTypes = {\n  contacts: propTypes.arrayOf(\n    propTypes.exact({\n      id: propTypes.string.isRequired,\n      name: propTypes.string.isRequired,\n      number: propTypes.string.isRequired,\n    })\n  ),\n};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Filter_container__L5eml\",\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterName\":\"Filter_filterName__Y2kKA\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\n\nconst contactsFilterSlice = createSlice({\n    name: \"filter\",\n    initialState: \"\",\n    reducers: {\n        setFilter: (state, action) => action.payload,\n    },\n});\n\nexport const { setFilter } = contactsFilterSlice.actions;\nexport const filterReducer = contactsFilterSlice.reducer;\n\n\n\n\n","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n\n  return (\n    <div className={css.container}>\n      <label className={css.filterLabel}>Find contacts by name </label>\n      <input\n        className={css.filterName}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter name\"\n        value={filterValue}\n        onChange={event => dispatch(setFilter(event.target.value.trim()))}\n      />\n    </div>\n)};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"App_container__ZdBeZ\"};","import ContactForm from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport css from '../components/App.module.css';\n\nexport const TasksPage = () => {\n    return (\n            <div className={css.container}>\n                <h1>Phonebook</h1>\n                <ContactForm />\n                <h2> Contacts</h2>\n                <Filter />\n                <ContactList />\n            </div> \n    )\n}"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","name","toLowerCase","includes","axios","fetchContacts","createAsyncThunk","_","thunkAPI","response","data","rejectWithValue","message","addContact","contact","resposne","deleteContact","contactId","dispatch","useDispatch","useSelector","onSubmit","event","preventDefault","id","nanoid","currentTarget","elements","value","number","find","Notify","reset","className","css","type","pattern","title","placeholder","required","ContactList","filteredContacts","useEffect","map","onClick","onDeleteContact","contactsFilterSlice","createSlice","initialState","reducers","setFilter","action","payload","actions","Filter","reducer","filterValue","onChange","target","trim","TasksPage"],"sourceRoot":""}